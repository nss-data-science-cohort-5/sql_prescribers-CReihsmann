--1. a. Which prescriber had the highest total number of claims (totaled over all drugs)? Report the npi and the total number of claims.
SELECT npi, sum(total_claim_count)
FROM prescription
GROUP BY npi
ORDER BY 2 DESC
LIMIT 1;

--1. b. Repeat the above, but this time report the nppes_provider_first_name, nppes_provider_last_org_name,  specialty_description, and the total number of claims.
SELECT 
	nppes_provider_first_name, 
	nppes_provider_last_org_name,  
	specialty_description, 
	SUM(total_claim_count)
FROM prescriber
INNER JOIN prescription 
USING(npi)
GROUP BY 1, 2, 3
ORDER BY SUM(total_claim_count) DESC
LIMIT 1;

--2. a. Which specialty had the most total number of claims (totaled over all drugs)?
SELECT 
	specialty_description, 
	SUM(total_claim_count)
FROM prescriber
INNER JOIN prescription 
USING(npi)
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

--2. b. Which specialty had the most total number of claims for opioids?
SELECT 
	specialty_description, 
	SUM(total_claim_count) AS total_claims
FROM prescription
INNER JOIN prescriber
USING (npi)
INNER JOIN drug
USING (drug_name)
WHERE opioid_drug_flag = 'Y'
GROUP BY specialty_description
ORDER BY total_claims DESC;

--2. c. **Challenge Question:** Are there any specialties that appear in the prescriber table that have no associated prescriptions in the prescription table?
SELECT specialty_description, COUNT(drug_name) AS numb_perscription
FROM prescriber p
FULL JOIN prescription
USING(npi)
GROUP BY specialty_description 
HAVING COUNT(drug_name) = 0
ORDER BY 2; --

--3. a. Which drug (generic_name) had the highest total drug cost?
SELECT 
	generic_name, 
	SUM(total_drug_cost)::MONEY
FROM prescription 
INNER JOIN drug
USING(drug_name)
GROUP BY generic_name
ORDER BY 2 DESC;

--3. b. Which drug (generic_name) has the hightest total cost per day? **Bonus: Round your cost per day column to 2 decimal places. Google ROUND to see how this works.
SELECT 
	generic_name, 
	ROUND(SUM(total_drug_cost)/ SUM(total_day_supply), 2)::MONEY
FROM prescription 
JOIN drug
USING(drug_name)
GROUP BY generic_name
ORDER BY 2 DESC;

/*4. a. For each drug in the drug table, return the drug name and then a column named 'drug_type' 
which says 'opioid'for drugs which have opioid_drug_flag = 'Y', 
says 'antibiotic' for those drugs which have antibiotic_drug_flag = 'Y', 
and says 'neither' for all other drugs.*/
SELECT drug_name,
	CASE 
		WHEN opioid_drug_flag = 'Y' THEN 'opioid'
		WHEN antibiotic_drug_flag = 'Y' THEN 'antibiotic'
		ELSE 'neither'
	END AS drug_type
FROM drug
ORDER BY drug_type DESC;

/*4. b.  Building off of the query you wrote for part a, determine whether 
more was spent (total_drug_cost) on opioids or on antibiotics. 
Hint: Format the total costs as MONEY for easier comparision.*/
SELECT drug_type, SUM(total_drug_cost)::MONEY
FROM(SELECT drug_name, total_drug_cost,
		CASE 
	 		WHEN opioid_drug_flag = 'Y' THEN 'opioid'
			WHEN antibiotic_drug_flag = 'Y' THEN 'antibiotic'
			ELSE 'neither'
		END AS drug_type
	 FROM drug
	 FULL JOIN prescription 
	 USING(drug_name)) AS drug_bill
WHERE drug_type != 'neither'
GROUP BY drug_type

--5. a. How many CBSAs are in Tennessee? **Warning:** The cbsa table contains information for all states, not just Tennessee.
SELECT COUNT(DISTINCT cbsa)
FROM cbsa
JOIN fips_county
USING(fipscounty)
WHERE state = 'TN'

/* alt and shorter (might pick up boarder counties in other states)
SELECT COUNT(DISTINCT cbsa)
FROM cbsa
WHERE cbsaname LIKE '%, TN%';
*/

--b. Which cbsa has the largest combined population? Which has the smallest? Report the CBSA name and total population.
SELECT cbsaname, SUM(population) AS comb_pop
FROM cbsa AS c
JOIN fips_county AS f
USING(fipscounty)
JOIN population AS p
USING(fipscounty)
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

select *
from (select cbsa.cbsaname, sum(population) total_population
      from cbsa
               inner join population p on cbsa.fipscounty = p.fipscounty
      group by cbsa.cbsaname
      order by total_population desc
      limit 1) sq1
union
select *
from (select cbsa.cbsaname, sum(population) total_population
      from cbsa
               inner join population p on cbsa.fipscounty = p.fipscounty
      group by cbsa.cbsaname
      order by total_population asc
      limit 1) sq1 --Brian F's answers both part of the question


--c. What is the largest (in terms of population) county which is not included in a CBSA? Report the county name and population.
SELECT 
	county, 
	population
FROM fips_county AS f
JOIN population AS p
USING(fipscounty)
LEFT JOIN cbsa AS c
USING (fipscounty)
WHERE state = 'TN'
	AND cbsa IS NULL
ORDER BY 2 DESC;
	
--6. a. Find all rows in the prescription table where total_claims is at least 3000. Report the drug_name and the total_claim_count.
SELECT drug_name, total_claim_count
FROM prescription
WHERE total_claim_count >= 3000;

--b. For each instance that you found in part a, add a column that indicates whether the drug is an opioid.
SELECT drug_name, total_claim_count, opioid_drug_flag AS opioid
FROM (SELECT drug_name, total_claim_count
	FROM prescription
	WHERE total_claim_count >= 3000) AS c
JOIN drug
USING (drug_name)

--c. Add another column to you answer from the previous part which gives the prescriber first and last name associated with each row.
SELECT nppes_provider_first_name, nppes_provider_last_org_name, drug_name, total_claim_count, opioid
FROM(SELECT drug_name, total_claim_count, opioid_drug_flag AS opioid, npi
	FROM (SELECT drug_name, total_claim_count, npi
	FROM prescription
	WHERE total_claim_count >= 3000) AS c
	JOIN drug
	USING (drug_name)) AS c2
LEFT JOIN prescriber AS p
USING (npi)

--7. a.
SELECT npi, drug_name
FROM prescriber
CROSS JOIN drug
WHERE nppes_provider_city = 'NASHVILLE'
	AND specialty_description = 'Pain Management'
	AND opioid_drug_flag = 'Y'

--b.
SELECT npi, drug_name, COALESCE(total_claim_count, 0)
FROM(SELECT npi, drug_name
	FROM prescriber
	CROSS JOIN drug
	WHERE nppes_provider_city = 'NASHVILLE'
	AND specialty_description = 'Pain Management'
	AND opioid_drug_flag = 'Y') AS a
LEFT JOIN prescription
USING(npi, drug_name)
ORDER BY npi;

--PART 2:

--1. How many npi numbers appear in the prescriber table but not in the prescription table?
WITH d AS (SELECT npi
FROM prescriber
EXCEPT
SELECT npi 
FROM prescription)
SELECT COUNT(npi)
FROM d;

SELECT COUNT(npi)
FROM prescriber
WHERE NOT EXISTS (
    SELECT npi
    FROM prescription
    WHERE prescriber.npi = prescription.npi); --Jessica's soln.


SELECT (SELECT COUNT(DISTINCT npi) AS npi_count
		FROM prescriber) - 
		(SELECT COUNT(DISTINCT npi) AS npi_count
		FROM prescription) AS npi_difference --Habeeb's soln.

/*
2.
    a. Find the top five drugs (generic_name) prescribed by prescribers with the specialty of Family Practice.

    b. Find the top five drugs (generic_name) prescribed by prescribers with the specialty of Cardiology.
	
	c. Which drugs appear in the top five prescribed for both Family Practice prescribers and Cardiologists? Combine what you did for parts a and b into a single query to answer this question.
*/
--a.
SELECT 
	d.generic_name, 
	SUM(p2.total_claim_count) AS total_perscribed
FROM prescriber AS p1
INNER JOIN prescription AS p2
USING (npi)
INNER JOIN drug AS d
USING (drug_name)
WHERE specialty_description = 'Family Practice'
GROUP BY d.generic_name
ORDER BY 2 DESC
LIMIT 5;

--b.
SELECT 
	d.generic_name, 
	SUM(p2.total_claim_count) AS total_perscribed
FROM prescriber AS p1
INNER JOIN prescription AS p2
USING (npi)
INNER JOIN drug AS d
USING (drug_name)
WHERE specialty_description = 'Cardiology'
GROUP BY d.generic_name
ORDER BY 2 DESC
LIMIT 5;

--c. 
WITH family_drugs AS (
	SELECT 
		d.generic_name, 
		SUM(p2.total_claim_count) AS total_perscribed
	FROM prescriber AS p1
	INNER JOIN prescription AS p2
	USING (npi)
	INNER JOIN drug AS d
	USING (drug_name)
	WHERE specialty_description = 'Family Practice'
	GROUP BY d.generic_name
	ORDER BY 2 DESC
	LIMIT 5),
cardiology_drugs AS (
	SELECT 
		d.generic_name, 
		SUM(p2.total_claim_count) AS total_perscribed
	FROM prescriber AS p1
	INNER JOIN prescription AS p2
	USING (npi)
	INNER JOIN drug AS d
	USING (drug_name)
	WHERE specialty_description = 'Cardiology'
	GROUP BY d.generic_name
	ORDER BY 2 DESC
	LIMIT 5)
SELECT generic_name
FROM family_drugs
INTERSECT
SELECT generic_name
FROM cardiology_drugs;

/*
3. Your goal in this question is to generate a list of the top prescribers in each of the major metropolitan areas of Tennessee.
    a. First, write a query that finds the top 5 prescribers in Nashville in terms of the total number of claims (total_claim_count) across all drugs. Report the npi, the total number of claims, and include a column showing the city.
    b. Now, report the same for Memphis.
    c. Combine your results from a and b, along with the results for Knoxville and Chattanooga.
*/

--a.
SELECT npi, nppes_provider_first_name, nppes_provider_last_org_name, SUM(total_claim_count) AS sum_claims
FROM prescriber
JOIN prescription 
USING (npi)
WHERE nppes_provider_city = 'NASHVILLE'
	AND nppes_provider_state = 'TN'
GROUP BY 1, 2, 3
ORDER BY 4 DESC
LIMIT 5;

--b.
SELECT npi, nppes_provider_first_name, nppes_provider_last_org_name, SUM(total_claim_count) AS sum_claims
FROM prescriber
JOIN prescription 
USING (npi)
WHERE nppes_provider_city = 'MEMPHIS'
	AND nppes_provider_state = 'TN'
GROUP BY 1, 2, 3
ORDER BY 4 DESC
LIMIT 5;
P
--c.
WITH nashville AS (
	SELECT npi, nppes_provider_first_name, nppes_provider_last_org_name, nppes_provider_city AS city, SUM(total_claim_count) AS sum_claims
	FROM prescriber
	JOIN prescription 
	USING (npi)
	WHERE nppes_provider_city = 'NASHVILLE'
		AND nppes_provider_state = 'TN'
	GROUP BY 1, 2, 3, 4
	ORDER BY 5 DESC
	LIMIT 5),
memphis AS (
	SELECT npi, nppes_provider_first_name, nppes_provider_last_org_name, nppes_provider_city AS city, SUM(total_claim_count) AS sum_claims
	FROM prescriber
	JOIN prescription 
	USING (npi)
	WHERE nppes_provider_city = 'MEMPHIS'
		AND nppes_provider_state = 'TN'
	GROUP BY 1, 2, 3, 4
	ORDER BY 5 DESC
	LIMIT 5),
knoxville AS (
	SELECT npi, nppes_provider_first_name, nppes_provider_last_org_name, nppes_provider_city AS city, SUM(total_claim_count) AS sum_claims
	FROM prescriber
	JOIN prescription 
	USING (npi)
	WHERE nppes_provider_city = 'KNOXVILLE'
		AND nppes_provider_state = 'TN'
	GROUP BY 1, 2, 3, 4
	ORDER BY 5 DESC
	LIMIT 5),
chattanooga AS (
	SELECT npi, nppes_provider_first_name, nppes_provider_last_org_name, nppes_provider_city AS city, SUM(total_claim_count) AS sum_claims
	FROM prescriber
	JOIN prescription 
	USING (npi)
	WHERE nppes_provider_city = 'CHATTANOOGA'
		AND nppes_provider_state = 'TN'
	GROUP BY 1, 2, 3, 4
	ORDER BY 5 DESC
	LIMIT 5)
SELECT *
FROM nashville
UNION
SELECT *
FROM memphis
UNION
SELECT * 
FROM knoxville
UNION
SELECT *
FROM chattanooga
ORDER BY city;

/*
4. Find all counties which had an above-average (for the state) number of overdose deaths in 2017. 
Report the county name and number of overdose deaths.
*/
WITH state_avg AS (SELECT AVG(overdose_deaths) AS total_deaths
FROM overdose_deaths
WHERE year = 2017)
SELECT 
	county, 
	overdose_deaths
FROM fips_county 
JOIN overdose_deaths AS o_d
USING (fipscounty)
WHERE year = 2017
	AND overdose_deaths > (SELECT total_deaths
						  FROM state_avg)
ORDER BY overdose_deaths DESC;
						  
/*
5.
    a. Write a query that finds the total population of Tennessee.
	
    b. Build off of the query that you wrote in part a to write a query that returns for 
	each county that county's name, its population, and the percentage of the total
	population of Tennessee that is contained in that county.
*/
--a.
SELECT SUM(population) AS state_pop
FROM population;


--b.
WITH total_pop AS (
	SELECT SUM(population) AS state_pop
	FROM population)
SELECT 
	county,
	population,
	ROUND((population * 100.0 / (SELECT state_pop FROM total_pop)), 2) || '%' AS perc_pop
FROM population
JOIN fips_county
USING(fipscounty)
ORDER BY 2 DESC;

--BONUS GROUPING SETS

/*
1. Write a query which returns the total number of claims for these two groups. Your output should look like this: 

specialty_description         |total_claims|
------------------------------|------------|
Interventional Pain Management|       55906|
Pain Management               |       70853|
*/

